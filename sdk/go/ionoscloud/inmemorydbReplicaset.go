// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/cristiGuranIonos/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InmemorydbReplicaset struct {
	pulumi.CustomResourceState

	// The network connection for your replica set. Only one connection is allowed.
	Connections InmemorydbReplicasetConnectionsOutput `pulumi:"connections"`
	// Credentials for the InMemoryDB replicaset.
	Credentials InmemorydbReplicasetCredentialsOutput `pulumi:"credentials"`
	// The human readable name of your replica set.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// The eviction policy for the replica set.
	EvictionPolicy pulumi.StringOutput `pulumi:"evictionPolicy"`
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId pulumi.StringPtrOutput `pulumi:"initialSnapshotId"`
	// The replica set location
	Location pulumi.StringOutput `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow InmemorydbReplicasetMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// Specifies How and If data is persisted.
	PersistenceMode pulumi.StringOutput `pulumi:"persistenceMode"`
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas pulumi.IntOutput `pulumi:"replicas"`
	// The resources of the individual replicas.
	Resources InmemorydbReplicasetResourcesOutput `pulumi:"resources"`
	// The InMemoryDB version of your replica set.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewInmemorydbReplicaset registers a new resource with the given unique name, arguments, and options.
func NewInmemorydbReplicaset(ctx *pulumi.Context,
	name string, args *InmemorydbReplicasetArgs, opts ...pulumi.ResourceOption) (*InmemorydbReplicaset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connections == nil {
		return nil, errors.New("invalid value for required argument 'Connections'")
	}
	if args.Credentials == nil {
		return nil, errors.New("invalid value for required argument 'Credentials'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EvictionPolicy == nil {
		return nil, errors.New("invalid value for required argument 'EvictionPolicy'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PersistenceMode == nil {
		return nil, errors.New("invalid value for required argument 'PersistenceMode'")
	}
	if args.Replicas == nil {
		return nil, errors.New("invalid value for required argument 'Replicas'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InmemorydbReplicaset
	err := ctx.RegisterResource("ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInmemorydbReplicaset gets an existing InmemorydbReplicaset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInmemorydbReplicaset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InmemorydbReplicasetState, opts ...pulumi.ResourceOption) (*InmemorydbReplicaset, error) {
	var resource InmemorydbReplicaset
	err := ctx.ReadResource("ionoscloud:index/inmemorydbReplicaset:InmemorydbReplicaset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InmemorydbReplicaset resources.
type inmemorydbReplicasetState struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections *InmemorydbReplicasetConnections `pulumi:"connections"`
	// Credentials for the InMemoryDB replicaset.
	Credentials *InmemorydbReplicasetCredentials `pulumi:"credentials"`
	// The human readable name of your replica set.
	DisplayName *string `pulumi:"displayName"`
	// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName *string `pulumi:"dnsName"`
	// The eviction policy for the replica set.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId *string `pulumi:"initialSnapshotId"`
	// The replica set location
	Location *string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *InmemorydbReplicasetMaintenanceWindow `pulumi:"maintenanceWindow"`
	// Specifies How and If data is persisted.
	PersistenceMode *string `pulumi:"persistenceMode"`
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas *int `pulumi:"replicas"`
	// The resources of the individual replicas.
	Resources *InmemorydbReplicasetResources `pulumi:"resources"`
	// The InMemoryDB version of your replica set.
	Version *string `pulumi:"version"`
}

type InmemorydbReplicasetState struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections InmemorydbReplicasetConnectionsPtrInput
	// Credentials for the InMemoryDB replicaset.
	Credentials InmemorydbReplicasetCredentialsPtrInput
	// The human readable name of your replica set.
	DisplayName pulumi.StringPtrInput
	// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
	DnsName pulumi.StringPtrInput
	// The eviction policy for the replica set.
	EvictionPolicy pulumi.StringPtrInput
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId pulumi.StringPtrInput
	// The replica set location
	Location pulumi.StringPtrInput
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow InmemorydbReplicasetMaintenanceWindowPtrInput
	// Specifies How and If data is persisted.
	PersistenceMode pulumi.StringPtrInput
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas pulumi.IntPtrInput
	// The resources of the individual replicas.
	Resources InmemorydbReplicasetResourcesPtrInput
	// The InMemoryDB version of your replica set.
	Version pulumi.StringPtrInput
}

func (InmemorydbReplicasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*inmemorydbReplicasetState)(nil)).Elem()
}

type inmemorydbReplicasetArgs struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections InmemorydbReplicasetConnections `pulumi:"connections"`
	// Credentials for the InMemoryDB replicaset.
	Credentials InmemorydbReplicasetCredentials `pulumi:"credentials"`
	// The human readable name of your replica set.
	DisplayName string `pulumi:"displayName"`
	// The eviction policy for the replica set.
	EvictionPolicy string `pulumi:"evictionPolicy"`
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId *string `pulumi:"initialSnapshotId"`
	// The replica set location
	Location string `pulumi:"location"`
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow *InmemorydbReplicasetMaintenanceWindow `pulumi:"maintenanceWindow"`
	// Specifies How and If data is persisted.
	PersistenceMode string `pulumi:"persistenceMode"`
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas int `pulumi:"replicas"`
	// The resources of the individual replicas.
	Resources InmemorydbReplicasetResources `pulumi:"resources"`
	// The InMemoryDB version of your replica set.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a InmemorydbReplicaset resource.
type InmemorydbReplicasetArgs struct {
	// The network connection for your replica set. Only one connection is allowed.
	Connections InmemorydbReplicasetConnectionsInput
	// Credentials for the InMemoryDB replicaset.
	Credentials InmemorydbReplicasetCredentialsInput
	// The human readable name of your replica set.
	DisplayName pulumi.StringInput
	// The eviction policy for the replica set.
	EvictionPolicy pulumi.StringInput
	// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
	InitialSnapshotId pulumi.StringPtrInput
	// The replica set location
	Location pulumi.StringInput
	// A weekly 4 hour-long window, during which maintenance might occur.
	MaintenanceWindow InmemorydbReplicasetMaintenanceWindowPtrInput
	// Specifies How and If data is persisted.
	PersistenceMode pulumi.StringInput
	// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
	// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
	// standby for a failure of the active instance.
	Replicas pulumi.IntInput
	// The resources of the individual replicas.
	Resources InmemorydbReplicasetResourcesInput
	// The InMemoryDB version of your replica set.
	Version pulumi.StringInput
}

func (InmemorydbReplicasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inmemorydbReplicasetArgs)(nil)).Elem()
}

type InmemorydbReplicasetInput interface {
	pulumi.Input

	ToInmemorydbReplicasetOutput() InmemorydbReplicasetOutput
	ToInmemorydbReplicasetOutputWithContext(ctx context.Context) InmemorydbReplicasetOutput
}

func (*InmemorydbReplicaset) ElementType() reflect.Type {
	return reflect.TypeOf((**InmemorydbReplicaset)(nil)).Elem()
}

func (i *InmemorydbReplicaset) ToInmemorydbReplicasetOutput() InmemorydbReplicasetOutput {
	return i.ToInmemorydbReplicasetOutputWithContext(context.Background())
}

func (i *InmemorydbReplicaset) ToInmemorydbReplicasetOutputWithContext(ctx context.Context) InmemorydbReplicasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InmemorydbReplicasetOutput)
}

// InmemorydbReplicasetArrayInput is an input type that accepts InmemorydbReplicasetArray and InmemorydbReplicasetArrayOutput values.
// You can construct a concrete instance of `InmemorydbReplicasetArrayInput` via:
//
//	InmemorydbReplicasetArray{ InmemorydbReplicasetArgs{...} }
type InmemorydbReplicasetArrayInput interface {
	pulumi.Input

	ToInmemorydbReplicasetArrayOutput() InmemorydbReplicasetArrayOutput
	ToInmemorydbReplicasetArrayOutputWithContext(context.Context) InmemorydbReplicasetArrayOutput
}

type InmemorydbReplicasetArray []InmemorydbReplicasetInput

func (InmemorydbReplicasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InmemorydbReplicaset)(nil)).Elem()
}

func (i InmemorydbReplicasetArray) ToInmemorydbReplicasetArrayOutput() InmemorydbReplicasetArrayOutput {
	return i.ToInmemorydbReplicasetArrayOutputWithContext(context.Background())
}

func (i InmemorydbReplicasetArray) ToInmemorydbReplicasetArrayOutputWithContext(ctx context.Context) InmemorydbReplicasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InmemorydbReplicasetArrayOutput)
}

// InmemorydbReplicasetMapInput is an input type that accepts InmemorydbReplicasetMap and InmemorydbReplicasetMapOutput values.
// You can construct a concrete instance of `InmemorydbReplicasetMapInput` via:
//
//	InmemorydbReplicasetMap{ "key": InmemorydbReplicasetArgs{...} }
type InmemorydbReplicasetMapInput interface {
	pulumi.Input

	ToInmemorydbReplicasetMapOutput() InmemorydbReplicasetMapOutput
	ToInmemorydbReplicasetMapOutputWithContext(context.Context) InmemorydbReplicasetMapOutput
}

type InmemorydbReplicasetMap map[string]InmemorydbReplicasetInput

func (InmemorydbReplicasetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InmemorydbReplicaset)(nil)).Elem()
}

func (i InmemorydbReplicasetMap) ToInmemorydbReplicasetMapOutput() InmemorydbReplicasetMapOutput {
	return i.ToInmemorydbReplicasetMapOutputWithContext(context.Background())
}

func (i InmemorydbReplicasetMap) ToInmemorydbReplicasetMapOutputWithContext(ctx context.Context) InmemorydbReplicasetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InmemorydbReplicasetMapOutput)
}

type InmemorydbReplicasetOutput struct{ *pulumi.OutputState }

func (InmemorydbReplicasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InmemorydbReplicaset)(nil)).Elem()
}

func (o InmemorydbReplicasetOutput) ToInmemorydbReplicasetOutput() InmemorydbReplicasetOutput {
	return o
}

func (o InmemorydbReplicasetOutput) ToInmemorydbReplicasetOutputWithContext(ctx context.Context) InmemorydbReplicasetOutput {
	return o
}

// The network connection for your replica set. Only one connection is allowed.
func (o InmemorydbReplicasetOutput) Connections() InmemorydbReplicasetConnectionsOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) InmemorydbReplicasetConnectionsOutput { return v.Connections }).(InmemorydbReplicasetConnectionsOutput)
}

// Credentials for the InMemoryDB replicaset.
func (o InmemorydbReplicasetOutput) Credentials() InmemorydbReplicasetCredentialsOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) InmemorydbReplicasetCredentialsOutput { return v.Credentials }).(InmemorydbReplicasetCredentialsOutput)
}

// The human readable name of your replica set.
func (o InmemorydbReplicasetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
func (o InmemorydbReplicasetOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// The eviction policy for the replica set.
func (o InmemorydbReplicasetOutput) EvictionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringOutput { return v.EvictionPolicy }).(pulumi.StringOutput)
}

// The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
func (o InmemorydbReplicasetOutput) InitialSnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringPtrOutput { return v.InitialSnapshotId }).(pulumi.StringPtrOutput)
}

// The replica set location
func (o InmemorydbReplicasetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A weekly 4 hour-long window, during which maintenance might occur.
func (o InmemorydbReplicasetOutput) MaintenanceWindow() InmemorydbReplicasetMaintenanceWindowOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) InmemorydbReplicasetMaintenanceWindowOutput { return v.MaintenanceWindow }).(InmemorydbReplicasetMaintenanceWindowOutput)
}

// Specifies How and If data is persisted.
func (o InmemorydbReplicasetOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringOutput { return v.PersistenceMode }).(pulumi.StringOutput)
}

// The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the
// value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only
// standby for a failure of the active instance.
func (o InmemorydbReplicasetOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

// The resources of the individual replicas.
func (o InmemorydbReplicasetOutput) Resources() InmemorydbReplicasetResourcesOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) InmemorydbReplicasetResourcesOutput { return v.Resources }).(InmemorydbReplicasetResourcesOutput)
}

// The InMemoryDB version of your replica set.
func (o InmemorydbReplicasetOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *InmemorydbReplicaset) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type InmemorydbReplicasetArrayOutput struct{ *pulumi.OutputState }

func (InmemorydbReplicasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InmemorydbReplicaset)(nil)).Elem()
}

func (o InmemorydbReplicasetArrayOutput) ToInmemorydbReplicasetArrayOutput() InmemorydbReplicasetArrayOutput {
	return o
}

func (o InmemorydbReplicasetArrayOutput) ToInmemorydbReplicasetArrayOutputWithContext(ctx context.Context) InmemorydbReplicasetArrayOutput {
	return o
}

func (o InmemorydbReplicasetArrayOutput) Index(i pulumi.IntInput) InmemorydbReplicasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InmemorydbReplicaset {
		return vs[0].([]*InmemorydbReplicaset)[vs[1].(int)]
	}).(InmemorydbReplicasetOutput)
}

type InmemorydbReplicasetMapOutput struct{ *pulumi.OutputState }

func (InmemorydbReplicasetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InmemorydbReplicaset)(nil)).Elem()
}

func (o InmemorydbReplicasetMapOutput) ToInmemorydbReplicasetMapOutput() InmemorydbReplicasetMapOutput {
	return o
}

func (o InmemorydbReplicasetMapOutput) ToInmemorydbReplicasetMapOutputWithContext(ctx context.Context) InmemorydbReplicasetMapOutput {
	return o
}

func (o InmemorydbReplicasetMapOutput) MapIndex(k pulumi.StringInput) InmemorydbReplicasetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InmemorydbReplicaset {
		return vs[0].(map[string]*InmemorydbReplicaset)[vs[1].(string)]
	}).(InmemorydbReplicasetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InmemorydbReplicasetInput)(nil)).Elem(), &InmemorydbReplicaset{})
	pulumi.RegisterInputType(reflect.TypeOf((*InmemorydbReplicasetArrayInput)(nil)).Elem(), InmemorydbReplicasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InmemorydbReplicasetMapInput)(nil)).Elem(), InmemorydbReplicasetMap{})
	pulumi.RegisterOutputType(InmemorydbReplicasetOutput{})
	pulumi.RegisterOutputType(InmemorydbReplicasetArrayOutput{})
	pulumi.RegisterOutputType(InmemorydbReplicasetMapOutput{})
}
