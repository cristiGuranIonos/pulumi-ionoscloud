// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ionoscloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/cristiGuranIonos/pulumi-ionoscloud/sdk/go/ionoscloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages **IP Blocks** on IonosCloud. IP Blocks contain reserved public IP addresses that can be assigned servers or other resources.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/cristiGuranIonos/pulumi-ionoscloud/sdk/go/ionoscloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ionoscloud.NewIpblock(ctx, "example", &ionoscloud.IpblockArgs{
//				Location: pulumi.String("us/las"),
//				Size:     pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Resource Ipblock can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import ionoscloud:index/ipblock:Ipblock myipblock {ipblock uuid}
// ```
type Ipblock struct {
	pulumi.CustomResourceState

	// Read-Only attribute. Lists consumption detail of an individual ip
	IpConsumers IpblockIpConsumerArrayOutput `pulumi:"ipConsumers"`
	// [integer] The list of IP addresses associated with this block.
	Ips pulumi.StringArrayOutput `pulumi:"ips"`
	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location pulumi.StringOutput `pulumi:"location"`
	// [string] The name of Ip Block
	Name pulumi.StringOutput `pulumi:"name"`
	// [integer] The number of IP addresses to reserve for this block.
	Size pulumi.IntOutput `pulumi:"size"`
}

// NewIpblock registers a new resource with the given unique name, arguments, and options.
func NewIpblock(ctx *pulumi.Context,
	name string, args *IpblockArgs, opts ...pulumi.ResourceOption) (*Ipblock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipblock
	err := ctx.RegisterResource("ionoscloud:index/ipblock:Ipblock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpblock gets an existing Ipblock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpblock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpblockState, opts ...pulumi.ResourceOption) (*Ipblock, error) {
	var resource Ipblock
	err := ctx.ReadResource("ionoscloud:index/ipblock:Ipblock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipblock resources.
type ipblockState struct {
	// Read-Only attribute. Lists consumption detail of an individual ip
	IpConsumers []IpblockIpConsumer `pulumi:"ipConsumers"`
	// [integer] The list of IP addresses associated with this block.
	Ips []string `pulumi:"ips"`
	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location *string `pulumi:"location"`
	// [string] The name of Ip Block
	Name *string `pulumi:"name"`
	// [integer] The number of IP addresses to reserve for this block.
	Size *int `pulumi:"size"`
}

type IpblockState struct {
	// Read-Only attribute. Lists consumption detail of an individual ip
	IpConsumers IpblockIpConsumerArrayInput
	// [integer] The list of IP addresses associated with this block.
	Ips pulumi.StringArrayInput
	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location pulumi.StringPtrInput
	// [string] The name of Ip Block
	Name pulumi.StringPtrInput
	// [integer] The number of IP addresses to reserve for this block.
	Size pulumi.IntPtrInput
}

func (IpblockState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipblockState)(nil)).Elem()
}

type ipblockArgs struct {
	// Read-Only attribute. Lists consumption detail of an individual ip
	IpConsumers []IpblockIpConsumer `pulumi:"ipConsumers"`
	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location string `pulumi:"location"`
	// [string] The name of Ip Block
	Name *string `pulumi:"name"`
	// [integer] The number of IP addresses to reserve for this block.
	Size int `pulumi:"size"`
}

// The set of arguments for constructing a Ipblock resource.
type IpblockArgs struct {
	// Read-Only attribute. Lists consumption detail of an individual ip
	IpConsumers IpblockIpConsumerArrayInput
	// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
	Location pulumi.StringInput
	// [string] The name of Ip Block
	Name pulumi.StringPtrInput
	// [integer] The number of IP addresses to reserve for this block.
	Size pulumi.IntInput
}

func (IpblockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipblockArgs)(nil)).Elem()
}

type IpblockInput interface {
	pulumi.Input

	ToIpblockOutput() IpblockOutput
	ToIpblockOutputWithContext(ctx context.Context) IpblockOutput
}

func (*Ipblock) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipblock)(nil)).Elem()
}

func (i *Ipblock) ToIpblockOutput() IpblockOutput {
	return i.ToIpblockOutputWithContext(context.Background())
}

func (i *Ipblock) ToIpblockOutputWithContext(ctx context.Context) IpblockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpblockOutput)
}

// IpblockArrayInput is an input type that accepts IpblockArray and IpblockArrayOutput values.
// You can construct a concrete instance of `IpblockArrayInput` via:
//
//	IpblockArray{ IpblockArgs{...} }
type IpblockArrayInput interface {
	pulumi.Input

	ToIpblockArrayOutput() IpblockArrayOutput
	ToIpblockArrayOutputWithContext(context.Context) IpblockArrayOutput
}

type IpblockArray []IpblockInput

func (IpblockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipblock)(nil)).Elem()
}

func (i IpblockArray) ToIpblockArrayOutput() IpblockArrayOutput {
	return i.ToIpblockArrayOutputWithContext(context.Background())
}

func (i IpblockArray) ToIpblockArrayOutputWithContext(ctx context.Context) IpblockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpblockArrayOutput)
}

// IpblockMapInput is an input type that accepts IpblockMap and IpblockMapOutput values.
// You can construct a concrete instance of `IpblockMapInput` via:
//
//	IpblockMap{ "key": IpblockArgs{...} }
type IpblockMapInput interface {
	pulumi.Input

	ToIpblockMapOutput() IpblockMapOutput
	ToIpblockMapOutputWithContext(context.Context) IpblockMapOutput
}

type IpblockMap map[string]IpblockInput

func (IpblockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipblock)(nil)).Elem()
}

func (i IpblockMap) ToIpblockMapOutput() IpblockMapOutput {
	return i.ToIpblockMapOutputWithContext(context.Background())
}

func (i IpblockMap) ToIpblockMapOutputWithContext(ctx context.Context) IpblockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpblockMapOutput)
}

type IpblockOutput struct{ *pulumi.OutputState }

func (IpblockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipblock)(nil)).Elem()
}

func (o IpblockOutput) ToIpblockOutput() IpblockOutput {
	return o
}

func (o IpblockOutput) ToIpblockOutputWithContext(ctx context.Context) IpblockOutput {
	return o
}

// Read-Only attribute. Lists consumption detail of an individual ip
func (o IpblockOutput) IpConsumers() IpblockIpConsumerArrayOutput {
	return o.ApplyT(func(v *Ipblock) IpblockIpConsumerArrayOutput { return v.IpConsumers }).(IpblockIpConsumerArrayOutput)
}

// [integer] The list of IP addresses associated with this block.
func (o IpblockOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ipblock) pulumi.StringArrayOutput { return v.Ips }).(pulumi.StringArrayOutput)
}

// [string] The regional location for this IP Block: us/las, us/ewr, de/fra, de/fkb.
func (o IpblockOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipblock) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// [string] The name of Ip Block
func (o IpblockOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipblock) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// [integer] The number of IP addresses to reserve for this block.
func (o IpblockOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipblock) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

type IpblockArrayOutput struct{ *pulumi.OutputState }

func (IpblockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipblock)(nil)).Elem()
}

func (o IpblockArrayOutput) ToIpblockArrayOutput() IpblockArrayOutput {
	return o
}

func (o IpblockArrayOutput) ToIpblockArrayOutputWithContext(ctx context.Context) IpblockArrayOutput {
	return o
}

func (o IpblockArrayOutput) Index(i pulumi.IntInput) IpblockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipblock {
		return vs[0].([]*Ipblock)[vs[1].(int)]
	}).(IpblockOutput)
}

type IpblockMapOutput struct{ *pulumi.OutputState }

func (IpblockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipblock)(nil)).Elem()
}

func (o IpblockMapOutput) ToIpblockMapOutput() IpblockMapOutput {
	return o
}

func (o IpblockMapOutput) ToIpblockMapOutputWithContext(ctx context.Context) IpblockMapOutput {
	return o
}

func (o IpblockMapOutput) MapIndex(k pulumi.StringInput) IpblockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipblock {
		return vs[0].(map[string]*Ipblock)[vs[1].(string)]
	}).(IpblockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpblockInput)(nil)).Elem(), &Ipblock{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpblockArrayInput)(nil)).Elem(), IpblockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpblockMapInput)(nil)).Elem(), IpblockMap{})
	pulumi.RegisterOutputType(IpblockOutput{})
	pulumi.RegisterOutputType(IpblockArrayOutput{})
	pulumi.RegisterOutputType(IpblockMapOutput{})
}
